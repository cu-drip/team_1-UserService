openapi: 3.0.1
info:
  title: User Service API
  version: v1
  description: API для управления пользователями и аутентификацией
servers:
  - url: http://localhost:8080
paths:
  /api/v1/users:
    get:
      summary: Получить всех пользователей
      tags: [User]
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Создать пользователя
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/users/{id}:
    get:
      summary: Получить пользователя по ID
      tags: [User]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Пользователь найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalError'
    patch:
      summary: Обновить пользователя
      tags: [User]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Пользователь обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Удалить пользователя
      tags: [User]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Пользователь удалён
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/auth/register:
    post:
      summary: Регистрация пользователя
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Пользователь зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/auth/login:
    post:
      summary: Вход пользователя
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/auth/me:
    get:
      summary: Получить свой профиль
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Данные пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalError'
    patch:
      summary: Обновить свой профиль
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Профиль обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/auth/change-password:
    patch:
      summary: Сменить пароль (авторизованный пользователь)
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Пароль успешно изменён
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/auth/password-reset-request:
    post:
      summary: Запрос на сброс пароля (забыли пароль)
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Письмо для сброса пароля отправлено (или всегда 200 для безопасности)
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/auth/password-reset:
    post:
      summary: Сброс пароля по токену (забыли пароль)
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Пароль успешно сброшен
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/InternalError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    BadRequestError:
      description: Некорректные данные
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 400
            message: Некорректные данные
    UnauthorizedError:
      description: Неавторизован
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 401
            message: Неавторизован
    NotFoundError:
      description: Не найдено
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 404
            message: Не найдено
    ConflictError:
      description: Конфликт (например, email уже занят)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 409
            message: Конфликт
    InternalError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 500
            message: Внутренняя ошибка сервера
  schemas:
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        surname:
          type: string
        patronymic:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        isAdmin:
          type: boolean
        dateOfBirth:
          type: string
        age:
          type: integer
        sex:
          type: string
        weight:
          type: number
          format: float
        height:
          type: number
          format: float
        createdAt:
          type: string
        bio:
          type: string
        avatarUrl:
          type: string
        mmr:
          type: integer
          description: Matchmaking Rating
          default: 100
    UserCreateRequest:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        patronymic:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        hashedPassword:
          type: string
        isAdmin:
          type: boolean
        dateOfBirth:
          type: string
        age:
          type: integer
        sex:
          type: string
        weight:
          type: number
          format: float
        height:
          type: number
          format: float
        bio:
          type: string
        avatarUrl:
          type: string
    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        patronymic:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        dateOfBirth:
          type: string
        age:
          type: integer
        sex:
          type: string
        weight:
          type: number
          format: float
        height:
          type: number
          format: float
        bio:
          type: string
        avatarUrl:
          type: string
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
        surname:
          type: string
        phoneNumber:
          type: string
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        surname:
          type: string
        patronymic:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        isAdmin:
          type: boolean
        dateOfBirth:
          type: string
        age:
          type: integer
        sex:
          type: string
        weight:
          type: number
          format: float
        height:
          type: number
          format: float
        createdAt:
          type: string
        bio:
          type: string
        avatarUrl:
          type: string
        mmr:
          type: integer
          description: Matchmaking Rating
          default: 100
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
    Sex:
      type: string
      enum:
        - MALE
        - FEMALE
        - OTHER
    Role:
      type: string
      enum:
        - PARTICIPANT
        - ORGANIZER
        - ADMIN 
    ChangePasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string 