/*
 * UserService API
 * API для управления пользователями, их профилями и спортивными рейтингами
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserSportMmr
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-02T16:07:11.258750+03:00[Europe/Moscow]", comments = "Generator version: 7.7.0")
public class UserSportMmr {
  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private UUID userId;

  /**
   * Gets or Sets sport
   */
  @JsonAdapter(SportEnum.Adapter.class)
  public enum SportEnum {
    FOOTBALL("football"),
    
    BOXING("boxing"),
    
    BASKETBALL("basketball"),
    
    CHESS("chess"),
    
    TENNIS("tennis"),
    
    JIU_JITSU("jiu_jitsu");

    private String value;

    SportEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SportEnum fromValue(String value) {
      for (SportEnum b : SportEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SportEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SportEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SportEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SportEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SportEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPORT = "sport";
  @SerializedName(SERIALIZED_NAME_SPORT)
  private SportEnum sport;

  public static final String SERIALIZED_NAME_MMR = "mmr";
  @SerializedName(SERIALIZED_NAME_MMR)
  private Double mmr;

  public UserSportMmr() {
  }

  public UserSportMmr userId(UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(UUID userId) {
    this.userId = userId;
  }


  public UserSportMmr sport(SportEnum sport) {
    this.sport = sport;
    return this;
  }

  /**
   * Get sport
   * @return sport
   */
  @javax.annotation.Nullable
  public SportEnum getSport() {
    return sport;
  }

  public void setSport(SportEnum sport) {
    this.sport = sport;
  }


  public UserSportMmr mmr(Double mmr) {
    this.mmr = mmr;
    return this;
  }

  /**
   * Get mmr
   * @return mmr
   */
  @javax.annotation.Nullable
  public Double getMmr() {
    return mmr;
  }

  public void setMmr(Double mmr) {
    this.mmr = mmr;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserSportMmr userSportMmr = (UserSportMmr) o;
    return Objects.equals(this.userId, userSportMmr.userId) &&
        Objects.equals(this.sport, userSportMmr.sport) &&
        Objects.equals(this.mmr, userSportMmr.mmr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, sport, mmr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserSportMmr {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    sport: ").append(toIndentedString(sport)).append("\n");
    sb.append("    mmr: ").append(toIndentedString(mmr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("user_id");
    openapiFields.add("sport");
    openapiFields.add("mmr");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserSportMmr
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserSportMmr.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserSportMmr is not found in the empty JSON string", UserSportMmr.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserSportMmr.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserSportMmr` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
      if ((jsonObj.get("sport") != null && !jsonObj.get("sport").isJsonNull()) && !jsonObj.get("sport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sport").toString()));
      }
      // validate the optional field `sport`
      if (jsonObj.get("sport") != null && !jsonObj.get("sport").isJsonNull()) {
        SportEnum.validateJsonElement(jsonObj.get("sport"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserSportMmr.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserSportMmr' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserSportMmr> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserSportMmr.class));

       return (TypeAdapter<T>) new TypeAdapter<UserSportMmr>() {
           @Override
           public void write(JsonWriter out, UserSportMmr value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserSportMmr read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserSportMmr given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserSportMmr
   * @throws IOException if the JSON string is invalid with respect to UserSportMmr
   */
  public static UserSportMmr fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserSportMmr.class);
  }

  /**
   * Convert an instance of UserSportMmr to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

